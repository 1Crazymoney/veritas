name: Build and deploy

on:
  workflow_dispatch:

  push:
    branches: [ "master" ]

env:
  NETCORE_VERSION: "8.0.x"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  REGISTRY: ${{ secrets.REGISTRY }}

jobs:
  test:
    concurrency: ci-${{ github.ref }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Setup dotnet 🏢
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.NETCORE_VERSION }}

      - name: Load cache 🔃
        id: nuget-cache
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-api-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-api-

      - name: Cache status ✅
        run: |
          echo "Cache hit: ${{ steps.nuget-cache.outputs.cache-hit }}"

      - name: Restore packages 📦
        run: dotnet restore --verbosity minimal

      - name: Test 🧪
        run: dotnet test --no-restore --verbosity minimal

  docker-build-and-push:
    concurrency: ci-${{ github.ref }}
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Set up QEMU 🛠️
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx ❎
        uses: docker/setup-buildx-action@v3

#      - name: Docker login 🔑
#        uses: docker/login-action@v3.1.0
#        with:
#          registry: "https://${{ secrets.REGISTRY }}/v2"
#          username: ${{ secrets.REGISTRY_USER }}
#          password: ${{ secrets.REGISTRY_PASS }}
      - name: Docker login 🔑
        run: |
          echo ${{ secrets.REGISTRY_PASS }} | docker login -u ${{ secrets.REGISTRY_USER }} --password-stdin https://${{ secrets.REGISTRY }}/v2

      - name: Build and push 🛠️
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/arm64/v8
          tags: "${{ secrets.REGISTRY }}/veritas-api:latest"
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    concurrency: ci-${{ github.ref }}
    runs-on: ubuntu-latest
    needs: docker-build-and-push

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Copy docker-compose to server 🔁
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "./docker-compose.yaml"
          target: ~/
          overwrite: true

      - name: Copy .nginx folder to server 🔁
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "./.nginx/conf.d/*.conf"
          target: ~/.nginx/conf.d/
          overwrite: true

      - name: Pull the new image on the host 🔽
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            docker login https://${{ secrets.REGISTRY }}/v2 --username ${{ secrets.REGISTRY_USER }} --password ${{ secrets.REGISTRY_PASS }}
            docker pull registry.ddjerqq.xyz/veritas-api:latest

      - name: Restart docker-compose 🔁
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            docker compose down
            docker compose up -d