@using ChartJs.Blazor
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Util
@using Domain.ValueObjects
@using Humanizer
<div class="flex flex-col gap-10">
    <Chart Config="_config"/>

    <ol class="text-xl text-nowrap text-white">
        @foreach (var (party, voteCount) in Votes)
        {
            <li @key="@party.Id" class="flex flex-row justify-between gap-3 px-5">
                <span class="@party.GetTextClass() truncate">@party.Name</span>
                <span>@voteCount.ToMetric()</span>
            </li>
        }
    </ol>
</div>

@code
{
    private PieConfig? _config;

    private Dictionary<Party, int> Votes { get; set; } = null!;

    protected override void OnInitialized()
    {
        Votes = new Dictionary<Party, int>
        {
            [42] = Random.Shared.Next(0, 1_000_000),
            [5] = Random.Shared.Next(0, 1_000_000),
            [9] = Random.Shared.Next(0, 1_000_000),
            [36] = Random.Shared.Next(0, 1_000_000),
        };
        // for debug only
        Votes = Votes
            .OrderBy(kv => kv.Value)
            .Reverse()
            .ToDictionary();

        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                CutoutPercentage = 60,
                Legend = ChartConfig.Legend,
                Tooltips = ChartConfig.Tooltips,
                Animation = ChartConfig.Animation,
            },
        };

        foreach (var party in Votes.Keys)
        {
            _config.Data.Labels.Add($" {party.Name}");
        }

        var dataset = new PieDataset<int>(Votes.Values)
        {
            BackgroundColor = Votes.Keys.Select(party =>
            {
                var (r, g, b) = party.GetColorRgb();
                return ColorUtil.ColorHexString(r, g, b);
            }).ToArray(),
        };

        _config.Data.Datasets.Add(dataset);
    }
}