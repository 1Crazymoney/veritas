@page "/stats"
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Util
@using Domain.ValueObjects
@using ChartJs.Blazor

@inject ApiService Api

<PageTitle>Stats</PageTitle>

<Loader Model="@Votes" Loaded="@Loaded">
    <ContentCard Class="col-span-12 container mx-auto max-w-screen-md flex flex-col md:flex-row items-center md:items-start md:justify-between p-5 px-10 gap-5">
        <div class="max-w-[250px]">
            <Chart Config="_config" Width="300" Height="300"/>
        </div>

        <ol class="text-xl flex-1 text-nowrap max-h-[300px] max-w-sm overflow-y-scroll scrollbar-none">
            @foreach ((Party party, int voteCount) in Votes!)
            {
                <li  class="flex flex-row justify-between gap-10">
                    <span class="@party.GetTextClass() truncate">
                        @party.Name
                    </span>

                    <span class="text-white">
                        @voteCount.ToString("N0")
                    </span>
                </li>
            }
        </ol>
    </ContentCard>
</Loader>


@code
{
    private PieConfig? _config;

    private Dictionary<int, int>? Votes { get; set; } = [];

    private bool Loaded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Votes = await Api.GetPartyVoteCounts(CancellationToken);
        Votes = Votes!
            .OrderBy(kv => kv.Value)
            .Reverse()
            .ToDictionary();

        _config = new PieConfig
        {
            Options = new PieOptions
            {
                MaintainAspectRatio = false,
                CutoutPercentage = 60,
                Legend = ChartConfig.NoLegend,
                Tooltips = ChartConfig.Tooltips,
                Animation = ChartConfig.EaseInOneSecAnimation,
            },
        };

        foreach (Party party in Votes.Keys)
        {
            _config.Data.Labels.Add($" {party.Name}");
        }

        var dataset = new PieDataset<int>(Votes.Values)
        {
            BackgroundColor = Votes.Keys.Select(party =>
            {
                var (r, g, b) = ((Party)party).GetColorRgb();
                return ColorUtil.ColorHexString(r, g, b);
            }).ToArray(),
        };

        _config.Data.Datasets.Add(dataset);

        Loaded = true;

        await base.OnInitializedAsync();
    }
}