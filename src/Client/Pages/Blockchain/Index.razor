@page "/blockchain"
@using Microsoft.AspNetCore.Components.QuickGrid

<AppSection Class="col-span-12 flex flex-col align-middle items-center text-white">
    <h1>Latest blocks</h1>

    <hr class="w-full border border-gray-600 my-3"/>

    <BlockList/>

    <hr class="w-full border border-gray-600 my-3"/>

    <ContentCard class="w-full text-start mb-3 overflow-scroll">
        <QuickGrid @ref="Grid"
                   TGridItem="BlockDto"
                   ItemsProvider="ItemProvider"
                   ItemKey="@(x => x.Index)"
                   ItemSize="52"
                   Class="w-full [&_thead]:border-b-2 text-nowrap [&_thead]:border-gray-600"
                   Pagination="PaginationState">

            <PropertyColumn TGridItem="BlockDto"
                            TProp="long"
                            Align="Align.Left"
                            Title="Index"
                            Format="N0"
                            Class="my-3"
                            Property="@(x => x.Index)"
                            Sortable="false"/>

            <TemplateColumn Align="Align.Center"
                            Title="Hash"
                            Class="text-center"
                            Sortable="false">
                <ChildContent>
                    <a href="/blockchain/blocks/@context.Index" class="underline text-orange-500" style="font-family: monospace;">
                        @context.ShortHash
                    </a>
                </ChildContent>
            </TemplateColumn>

            <PropertyColumn TGridItem="BlockDto"
                            TProp="float"
                            Align="Align.Start"
                            Title="Fill"
                            Format="P"
                            Class="my-3 text-start  hidden sm:table-cell"
                            Property="@(x => x.Votes.Count / 128f)"
                            Sortable="false"/>

            <PropertyColumn TGridItem="BlockDto"
                            TProp="int"
                            Align="Align.Left"
                            Title="Tx Count"
                            Class="my-3 hidden sm:table-cell"
                            Property="@(x => x.Votes.Count)"
                            Sortable="false"/>

            <PropertyColumn TGridItem="BlockDto"
                            TProp="long"
                            Align="Align.Left"
                            Title="Nonce"
                            Format="N0"
                            Class="my-3 hidden md:table-cell"
                            Property="@(x => x.Nonce)"
                            Sortable="false"/>

            <TemplateColumn Align="Align.Left"
                            Title="Top Party"
                            Class="my-3 hidden md:md:table-cell max-w-[200px] truncate"
                            Sortable="false">
                <ChildContent>
                    @if (context.TopParty is { } topParty)
                    {
                        <span class="@topParty.GetTextClass()">
                            @topParty.Name
                        </span>
                    }
                </ChildContent>
            </TemplateColumn>

            <PropertyColumn TGridItem="BlockDto"
                            TProp="TimeSpan"
                            Align="Align.End"
                            Title="Mined"
                            Format="g"
                            Class="my-3 text-end"
                            Property="@(u => DateTime.Now - u.Mined)"
                            Sortable="false"/>
        </QuickGrid>
    </ContentCard>
</AppSection>

@code
{
    private QuickGrid<BlockDto> Grid { get; set; } = null!;

    private PaginationState PaginationState { get; set; } = new() { ItemsPerPage = 25 };

    private async ValueTask<GridItemsProviderResult<BlockDto>> ItemProvider(GridItemsProviderRequest<BlockDto> request)
    {
        // var req = new UserGetForAdminDashboardQuery
        // {
        //     Date = Date,
        //     NameFilter = NameFilter,
        //     Start = request.StartIndex,
        //     Count = request.Count ?? PaginationState.ItemsPerPage
        // };
        //
        // var res = await Mediator.Send(req, CancellationToken);
        // if (res.IsError)
        // {
        //     Toast.ShowStatus(false);
        //     return new GridItemsProviderResult<BlockDto>(
        //         new List<BlockDto>(), 0);
        // }

        // (var data, int count) = res.Value;
        // data = request.ApplySorting(data.AsQueryable());
        return new GridItemsProviderResult<BlockDto>
        {
            Items =
            [
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
                BlockDto.RandomBlockDto(),
            ],
            TotalItemCount = 1,
        };
        // throw new NotImplementedException();
    }
}