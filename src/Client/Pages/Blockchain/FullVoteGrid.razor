@using System.Security.Cryptography
@using Domain.Common
@using Microsoft.AspNetCore.Components.QuickGrid

@{
    const string rowClass = "align-middle text-2xl font-mono text-start text-nowrap truncate";
}

<QuickGrid @ref="_grid"
           TGridItem="BlockDto"
           ItemSize="50"
           ItemsProvider="DataProvider"
           ItemKey="@(x => x.Index)"
           Class="table-auto font-normal overflow-y-scroll
                  [&_tbody>tr]:border-2 [&_tbody>tr]:border-red-500 [&_tbody>tr]:rounded-md
                  [&_.col-title-text]:font-archyedt"
           Pagination="_paginationState">

    <TemplateColumn TGridItem="BlockDto"
                    Class="name-column"
                    Align="Align.Left">
        <div class="flex my-2 text-start text-nowrap truncate align-middle">
            <div class="flex justify-center items-center w-16 h-16 rounded-md"
                 style="background-image: linear-gradient(@Random.Shared.Next(0, 360)deg, #fea488, #f8c7b8);">
                <Heroicon Name="@HeroiconName.Link" class="w-8 h-8"/>
            </div>
        </div>
    </TemplateColumn>

    <PropertyColumn TGridItem="BlockDto"
                    TProp="long"
                    Align="Align.Left"
                    Class="@rowClass"
                    Title="ინდექსი"
                    Format="N0"
                    Property="@(x => x.Index)"/>

    <PropertyColumn TGridItem="BlockDto"
                    TProp="string"
                    Align="Align.Left"
                    Class="@rowClass"
                    Title="ჰეში"
                    Property="@(x => x.ShortHash)"/>

    <PropertyColumn TGridItem="BlockDto"
                    TProp="string"
                    Align="Align.Left"
                    Class="@rowClass"
                    Title="მაინინგის დრო"
                    Property="@(x => x.MinedOffset)"/>

    <PropertyColumn TGridItem="BlockDto"
                    TProp="int"
                    Align="Align.Left"
                    Class="@rowClass"
                    Title="ხმა"
                    Format="N0"
                    Property="@(x => x.VoteCount)"/>

    <PropertyColumn TGridItem="BlockDto"
                    TProp="long"
                    Align="Align.Left"
                    Class="@rowClass"
                    Title="ნონსი"
                    Format="N0"
                    Property="@(x => x.Nonce)"/>

    <PropertyColumn TGridItem="BlockDto"
                    TProp="double"
                    Align="Align.Left"
                    Class="@rowClass"
                    Title="ტევადობა"
                    Format="P2"
                    Property="@(x => x.Fill)"/>

    <PropertyColumn TGridItem="BlockDto"
                    TProp="int"
                    Align="Align.Left"
                    Class="@rowClass"
                    Title="ზომა"
                    Format="0 Bytes"
                    Property="@(x => x.Size)"/>
</QuickGrid>

@code
{

    class BlockDto
    {
        public long Index { get; set; }

        public string Hash => SHA256.HashData(BitConverter.GetBytes(Index)).ToHexString();

        public string ShortHash => $"{Hash[..4]}-{Hash[^4..]}";

        public DateTime MinedOn { get; set; }

        public string MinedOffset
        {
            get
            {
                var diff = DateTime.Now - MinedOn;
                return $"{diff.Hours}:{diff.Minutes}:{diff.Seconds}";
            }
        }

        public int VoteCount { get; set; }

        public long Nonce { get; set; }

        public double Fill => (double)VoteCount / 256;

        public int Size => VoteCount * 128;

        public static BlockDto RandomBlock() => new()
        {
            Index = Random.Shared.Next(0, int.MaxValue),
            MinedOn = DateTime.Now.AddTicks(-Random.Shared.Next(0, int.MaxValue)),
            VoteCount = Random.Shared.Next(0, 256),
            Nonce = Random.Shared.Next(0, 10000),
        };
    }

    [QueryParameterBound]
    public int? Page { get; set; }

    private readonly PaginationState _paginationState = new() { ItemsPerPage = 10 };
    private QuickGrid<BlockDto> _grid = null!;
    private IEnumerable<string> Usernames { get; set; } = Enumerable.Empty<string>();

    private async ValueTask<GridItemsProviderResult<BlockDto>> DataProvider(GridItemsProviderRequest<BlockDto> request)
    {
        // if (res.IsError)
        // {
        //     return new GridItemsProviderResult<BlockDto>
        //     {
        //         Items = new List<BlockDto>(),
        //         TotalItemCount = 0,
        //     };
        // }

        var count = 10;
        IEnumerable<BlockDto> data = Enumerable.Range(0, count)
            .Select(_ => BlockDto.RandomBlock())
            .ToList();

        data = request.ApplySorting(data.AsQueryable());

        return new GridItemsProviderResult<BlockDto>
        {
            Items = data.ToList(),
            TotalItemCount = count,
        };
    }

}