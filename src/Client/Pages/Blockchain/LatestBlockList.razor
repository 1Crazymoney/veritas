<div class="relative flex flex-row-reverse w-full md:flex-col justify-between gap-3">
    <div class="block md:hidden absolute w-full border border-neutral-500 top-6"></div>

    <h2 class="hidden md:block font-archyedt text-3xl" @onclick="@(() => AddBlock(NextBlock))">უახლესი ბლოკები</h2>

    @foreach (var block in _blocks)
    {
        <a @key="@block.Index" href="blockchain/blocks/@block.Index"
           class="flex flex-row items-center gap-3 p-0 md:p-4 cursor-pointer
          bg-[#50505050] hover:bg-[#606060] font-mono text-nowrap truncate border border-party-card rounded-md
          transition-transform animate-[slideDown_0.5s_ease_forwards]">
            <div class="flex justify-center items-center w-12 h-12 md:w-16 md:h-16 rounded-md"
                 style="background-image: linear-gradient(@Random.Shared.Next(0, 360)deg,#6b6dc8,#6b81c8,#9194d1);">
                <Heroicon Name="@HeroiconName.Link" class="hidden md:block w-8 h-8"/>
                <span class="block md:hidden">@(block.Index.ToString("N0"))</span>
            </div>

            <div class="hidden md:flex flex-col items-start text-md">
                <span>
                    @(block.Index.ToString("N0"))
                </span>

                <span class="text-xs text-gray-400">
                    @(block.Mined.ToString("dd MMM yyyy • HH:mm:ss • UTCzz"))
                </span>

                <div class="flex w-full justify-between">
                    <span class="font-archyedt">
                        @(block.VoteCount) ხმა
                    </span>
                    •
                    <span class="text-gray-400">
                        @(block.SizeBits.ToString("F2")) Mb
                    </span>
                </div>
            </div>
        </a>
    }
</div>

@code
{
    public record MinimalBlock(long Index, DateTime Mined, int VoteCount)
    {
        public double SizeBits => (double)VoteCount * 128 / 1000;
    }

    private List<MinimalBlock> _blocks =
    [
        new MinimalBlock(2, DateTime.Now, Random.Shared.Next(0, 256)),
        new MinimalBlock(1, DateTime.Now.AddDays(-1), Random.Shared.Next(0, 256)),
        new MinimalBlock(0, DateTime.Now.AddDays(-2), Random.Shared.Next(0, 256)),
    ];

    private MinimalBlock NextBlock => new(_blocks.OrderBy(x => x.Index).Last().Index + 1, DateTime.Now, Random.Shared.Next(0, 256));

    private void AddBlock(MinimalBlock block)
    {
        _blocks.Insert(0, block);

        if (_blocks.Count > 5)
            _blocks = _blocks[..^1];
    }
}