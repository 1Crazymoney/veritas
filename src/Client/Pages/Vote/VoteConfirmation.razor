@inject ApiService Api
@inject VoteService VoteService
@inject NavigationManager Nav
@inject VoterAccessor VoterAccessor
@inject CookieUtil Cookies
@inject PublicKeyAuthStateProvider Auth

<div class="flex flex-col p-4 sm:min-w-[32rem] bg-background rounded-md text-white font-archyedt border-2 @Party.GetBorderClass()">
    <p class="text-2xl">
        გსურთ მიცეთ ხმა <a href="@Party.Link" target="_blank" class="@Party.GetTextClass()">@Party.Name</a>'ს ?
    </p>

    <div class="text-2xl mb-2">
        <span>პარტიის ნომერია</span>
        <span class="@Party.GetTextClass()">@Party.Id</span>
    </div>

    <div class="w-full flex flex-row gap-3 text-xl">
        <Button OnClick="@Close">
            არა
        </Button>

        <Button OnClick="@Vote" Class="from-green-500 to-sky-500 focus:ring-green-800">
            კი
        </Button>
    </div>

    <p class="text-gray-500 mt-2">
        ხმის მიცემით ეთანხმებით
        <a href="privacy" class="text-blue-600 underline">წესებს</a>
    </p>
</div>

@code
{
    [Parameter, EditorRequired]
    public Party Party { get; set; }

    [CascadingParameter]
    public BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private async Task Close() => await BlazoredModal.CloseAsync();

    private async Task Vote()
    {
        var voter = await VoterAccessor.GetVoterAsync();
        voter.LastVoteTime = DateTime.UtcNow;
        await Cookies.SetVoterAsync(voter);

        Auth.RefreshAuthState();
        await InvokeAsync(StateHasChanged);

        Nav.NavigateTo("stats");

        await InvokeAsync(async () =>
        {
            var command = await VoteService.CreateVoteCommand(Party.Id);
            await Api.CastVote(command);
            ShowSuccess($"თქვენ წარმატებით მიეცით ხმა {Party.Name}-ს");
        });
    }
}