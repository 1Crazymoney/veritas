@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.BarChart.Axes
@using Domain.Common
@using ChartJs.Blazor;

<Chart Config="_config" Height="400"/>

@code
{
    private BarConfig? _config;

    [Parameter, EditorRequired]
    public Dictionary<Party, Dictionary<DateOnly, int>> DailyVotes { get; set; } = [];

    protected override void OnInitialized()
    {
        _config = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Display = false,
                },
                // Animation = new ArcAnimation
                // {
                //     Easing = Easing.EaseInOutQuint,
                //     Duration = 300,
                // },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Index,
                    Intersect = true,
                    BackgroundColor = "#000000",
                    DisplayColors = true,
                    BodyFontFamily = "archyedt",
                    BodyFontSize = 18,
                    BodySpacing = 10,
                    XPadding = 10,
                    YPadding = 10,
                },
                Scales = new BarScales
                {
                    XAxes =
                    [
                        new BarCategoryAxis
                        {
                            Stacked = true,
                            GridLines = new GridLines
                            {
                                Color = ColorUtil.ColorString(50, 50, 50),
                                ZeroLineColor = ColorUtil.ColorString(50, 50, 50),
                            },
                        },
                    ],
                    YAxes =
                    [
                        new BarLinearCartesianAxis
                        {
                            Stacked = true,
                            GridLines = new GridLines
                            {
                                Color = ColorUtil.ColorString(50, 50, 50),
                                ZeroLineColor = ColorUtil.ColorString(50, 50, 50),
                            },
                        },
                    ],
                },
            },
        };

        foreach (var date in DailyVotes.Values.First().Keys)
        {
            _config.Data.Labels.Add(date.ToDateTime().DaysAgoGe());
        }

        foreach (var (party, votes) in DailyVotes)
        {
            var (r, g, b) = party.GetColorRgb();

            var dataset = new BarDataset<int>(votes.Values.ToArray())
            {
                Label = party.GetName(),
                BackgroundColor = ColorUtil.ColorHexString(r, g, b),
            };

            _config.Data.Datasets.Add(dataset);
        }
    }
}