// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("00000000000000_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("Application.Common.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasMaxLength(4096)
                        .HasColumnType("TEXT")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccuredOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("occured_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("p_k_outbox_message");

                    b.ToTable("outbox_message");
                });

            modelBuilder.Entity("Domain.Entities.Block", b =>
                {
                    b.Property<long>("Index")
                        .HasColumnType("INTEGER")
                        .HasColumnName("idx");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("hash");

                    b.Property<string>("MerkleRoot")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("mrkl_root");

                    b.Property<long>("Nonce")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nonce");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("previous_hash");

                    b.HasKey("Index")
                        .HasName("p_k_block");

                    b.HasIndex("Hash")
                        .IsUnique()
                        .HasDatabaseName("i_x_block_hash");

                    b.ToTable("block");
                });

            modelBuilder.Entity("Domain.Entities.Vote", b =>
                {
                    b.Property<string>("Hash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("hash");

                    b.Property<long?>("BlockIndex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("block_index");

                    b.Property<long>("Nonce")
                        .HasColumnType("INTEGER")
                        .HasColumnName("nonce");

                    b.Property<int>("PartyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("party_id");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("signature");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("timestamp");

                    b.Property<string>("VoterAddress")
                        .IsRequired()
                        .HasMaxLength(44)
                        .HasColumnType("TEXT")
                        .HasColumnName("addr");

                    b.HasKey("Hash")
                        .HasName("p_k_vote");

                    b.HasIndex("BlockIndex")
                        .HasDatabaseName("i_x_vote_block_index");

                    b.HasIndex("PartyId")
                        .HasDatabaseName("i_x_vote_party_id");

                    b.HasIndex("VoterAddress")
                        .HasDatabaseName("i_x_vote_addr");

                    b.ToTable("vote");
                });

            modelBuilder.Entity("Domain.Entities.Voter", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(44)
                        .HasColumnType("TEXT")
                        .HasColumnName("addr");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasMaxLength(182)
                        .HasColumnType("TEXT")
                        .HasColumnName("pkey");

                    b.HasKey("Address")
                        .HasName("p_k_voter");

                    b.HasIndex("PublicKey")
                        .IsUnique()
                        .HasDatabaseName("i_x_voter_pkey");

                    b.ToTable("voter");
                });

            modelBuilder.Entity("Domain.Entities.Vote", b =>
                {
                    b.HasOne("Domain.Entities.Block", "Block")
                        .WithMany("Votes")
                        .HasForeignKey("BlockIndex")
                        .HasConstraintName("f_k_vote_block_block_index");

                    b.HasOne("Domain.Entities.Voter", "Voter")
                        .WithMany()
                        .HasForeignKey("VoterAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_vote__voter_addr");

                    b.Navigation("Block");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("Domain.Entities.Block", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
